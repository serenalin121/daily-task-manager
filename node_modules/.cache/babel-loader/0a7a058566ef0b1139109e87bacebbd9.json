{"ast":null,"code":"var _jsxFileName = \"/Users/serenalin/sei-bromeliad/projects/daily-task-manager/daily-task-manager-front-end/taskapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Task from \"./components/Task\";\nimport NewForm from \"./components/Newform\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"; // Setup the localizer by providing the moment Object to the correct localizer.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst baseUrl = \"http://localhost:3003\";\n\nconst App = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const events = tasks.map(task => ({\n    start: moment(task.dueDate).toDate(),\n    end: moment(task.dueDate).add(1, \"days\").toDate(),\n    title: task.name\n  }));\n\n  const getTasks = () => {\n    fetch(baseUrl + \"/tasks\").then(res => {\n      if (res.status === 200) {\n        return res.json();\n      } else {\n        return [];\n      }\n    }).then(data => {\n      setTasks(data);\n    });\n  };\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  const handleAddTask = newTask => {\n    const copyTasks = [...tasks];\n    copyTasks.push(newTask);\n    setTasks(copyTasks);\n  };\n\n  const handleDeleteTask = index => {\n    const copyTasks = [...tasks];\n    copyTasks.splice(index, 1);\n    setTasks(copyTasks);\n  };\n\n  const handleUpdateTask = updatedTask => {\n    const copyTasks = [...tasks];\n    const findIndex = tasks.findIndex(task => task._id === updatedTask._id);\n    copyTasks[findIndex].name = updatedTask.name;\n    copyTasks[findIndex].dueDate = updatedTask.dueDate;\n    copyTasks[findIndex].isComplete = updatedTask.isComplete;\n    setTasks(copyTasks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Daily Task Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add a new task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewForm, {\n        baseUrl: baseUrl,\n        addTask: handleAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"All Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: tasks.map(task => {\n                return /*#__PURE__*/_jsxDEV(Task, {\n                  task: task,\n                  allTasks: tasks,\n                  baseUrl: baseUrl,\n                  deleteTask: handleDeleteTask,\n                  updateTask: handleUpdateTask\n                }, task._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(Calendar, {\n            localizer: localizer,\n            defaultDate: new Date(),\n            defaultView: \"month\",\n            events: events,\n            style: {\n              height: \"50vh\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/serenalin/sei-bromeliad/projects/daily-task-manager/daily-task-manager-front-end/taskapp/src/App.js"],"names":["React","useState","useEffect","Task","NewForm","Calendar","momentLocalizer","moment","Container","Row","Col","localizer","baseUrl","App","tasks","setTasks","events","map","task","start","dueDate","toDate","end","add","title","name","getTasks","fetch","then","res","status","json","data","handleAddTask","newTask","copyTasks","push","handleDeleteTask","index","splice","handleUpdateTask","updatedTask","findIndex","_id","isComplete","Date","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Task from \"./components/Task\";\nimport NewForm from \"./components/Newform\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\n// Setup the localizer by providing the moment Object to the correct localizer.\nconst localizer = momentLocalizer(moment);\n\nconst baseUrl = \"http://localhost:3003\";\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n\n  const events = tasks.map((task) => ({\n    start: moment(task.dueDate).toDate(),\n    end: moment(task.dueDate).add(1, \"days\").toDate(),\n    title: task.name,\n  }));\n\n  const getTasks = () => {\n    fetch(baseUrl + \"/tasks\")\n      .then((res) => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          return [];\n        }\n      })\n      .then((data) => {\n        setTasks(data);\n      });\n  };\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  const handleAddTask = (newTask) => {\n    const copyTasks = [...tasks];\n    copyTasks.push(newTask);\n    setTasks(copyTasks);\n  };\n\n  const handleDeleteTask = (index) => {\n    const copyTasks = [...tasks];\n    copyTasks.splice(index, 1);\n    setTasks(copyTasks);\n  };\n\n  const handleUpdateTask = (updatedTask) => {\n    const copyTasks = [...tasks];\n    const findIndex = tasks.findIndex((task) => task._id === updatedTask._id);\n    copyTasks[findIndex].name = updatedTask.name;\n    copyTasks[findIndex].dueDate = updatedTask.dueDate;\n    copyTasks[findIndex].isComplete = updatedTask.isComplete;\n    setTasks(copyTasks);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1>Daily Task Manager</h1>\n        <h2>Add a new task</h2>\n        <NewForm baseUrl={baseUrl} addTask={handleAddTask} />\n\n        <h3>All Tasks</h3>\n        <Row>\n          <Col xs={12} md={6}>\n            <table>\n              <tbody>\n                {tasks.map((task) => {\n                  return (\n                    <Task\n                      key={task._id}\n                      task={task}\n                      allTasks={tasks}\n                      baseUrl={baseUrl}\n                      deleteTask={handleDeleteTask}\n                      updateTask={handleUpdateTask}\n                    />\n                  );\n                })}\n              </tbody>\n            </table>\n          </Col>\n          <Col xs={12} md={6}>\n            <Calendar\n              localizer={localizer}\n              defaultDate={new Date()}\n              defaultView=\"month\"\n              events={events}\n              style={{ height: \"50vh\" }}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}