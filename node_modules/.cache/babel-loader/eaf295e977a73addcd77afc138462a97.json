{"ast":null,"code":"var _jsxFileName = \"/Users/serenalin/sei-bromeliad/projects/daily-task-manager/daily-task-manager-front-end/taskapp/src/components/Task.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport EditForm from \"./EditForm\";\nimport { Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Task = props => {\n  _s();\n\n  const [isInEditMode, setIsInEditMode] = useState(false);\n\n  const handledeleteTask = id => {\n    fetch(props.baseUrl + \"/tasks/\" + id, {\n      method: \"DELETE\"\n    }).then(res => {\n      const findIndex = props.allTasks.findIndex(task => task._id === id);\n      props.deleteTask(findIndex);\n    });\n  };\n\n  const toggleEditFrom = () => {\n    setIsInEditMode(!isInEditMode);\n  };\n\n  const saveUpdateTask = enteredTask => {\n    props.updateTask(enteredTask);\n    setIsInEditMode(!isInEditMode);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [!isInEditMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: props.task.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: props.task.dueDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: props.task.isComplete,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isInEditMode && /*#__PURE__*/_jsxDEV(EditForm, {\n      task: props.task,\n      baseUrl: props.baseUrl,\n      updateTask: saveUpdateTask\n    }, props.task._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-light\",\n        onClick: toggleEditFrom,\n        children: !isInEditMode ? \"Edit\" : \"Cancel\"\n      }, props.task._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-light\",\n        type: \"submit\",\n        onClick: () => handledeleteTask(props.task._id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, props.task._id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Task, \"0zUrbqioMhXkIRO6BPiAM1z6ckI=\");\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/Users/serenalin/sei-bromeliad/projects/daily-task-manager/daily-task-manager-front-end/taskapp/src/components/Task.js"],"names":["useState","EditForm","Button","Task","props","isInEditMode","setIsInEditMode","handledeleteTask","id","fetch","baseUrl","method","then","res","findIndex","allTasks","task","_id","deleteTask","toggleEditFrom","saveUpdateTask","enteredTask","updateTask","name","dueDate","isComplete"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMO,gBAAgB,GAAIC,EAAD,IAAQ;AAC/BC,IAAAA,KAAK,CAACL,KAAK,CAACM,OAAN,GAAgB,SAAhB,GAA4BF,EAA7B,EAAiC;AACpCG,MAAAA,MAAM,EAAE;AAD4B,KAAjC,CAAL,CAEGC,IAFH,CAESC,GAAD,IAAS;AACf,YAAMC,SAAS,GAAGV,KAAK,CAACW,QAAN,CAAeD,SAAf,CAA0BE,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaT,EAAhD,CAAlB;AACAJ,MAAAA,KAAK,CAACc,UAAN,CAAiBJ,SAAjB;AACD,KALD;AAMD,GAPD;;AASA,QAAMK,cAAc,GAAG,MAAM;AAC3Bb,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFD;;AAIA,QAAMe,cAAc,GAAIC,WAAD,IAAiB;AACtCjB,IAAAA,KAAK,CAACkB,UAAN,CAAiBD,WAAjB;AACAf,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAHD;;AAKA,sBACE;AAAA,eACG,CAACA,YAAD,iBACC;AAAA,8BACE;AAAA,kBAAKD,KAAK,CAACY,IAAN,CAAWO;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKnB,KAAK,CAACY,IAAN,CAAWQ;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,+BACE;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,OAAO,EAAEpB,KAAK,CAACY,IAAN,CAAWS,UAA3C;AAAuD,UAAA,QAAQ;AAA/D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA,oBAFJ,EAUGpB,YAAY,iBACX,QAAC,QAAD;AAEE,MAAA,IAAI,EAAED,KAAK,CAACY,IAFd;AAGE,MAAA,OAAO,EAAEZ,KAAK,CAACM,OAHjB;AAIE,MAAA,UAAU,EAAEU;AAJd,OACOhB,KAAK,CAACY,IAAN,CAAWC,GADlB;AAAA;AAAA;AAAA;AAAA,YAXJ,eAkBE;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,eADV;AAGE,QAAA,OAAO,EAAEE,cAHX;AAAA,kBAKG,CAACd,YAAD,GAAgB,MAAhB,GAAyB;AAL5B,SAEOD,KAAK,CAACY,IAAN,CAAWC,GAFlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAlBF,eA2BE;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,eADV;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,OAAO,EAAE,MAAMV,gBAAgB,CAACH,KAAK,CAACY,IAAN,CAAWC,GAAZ,CAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA3BF;AAAA,KAASb,KAAK,CAACY,IAAN,CAAWC,GAApB;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CA5DD;;GAAMd,I;;KAAAA,I;AA8DN,eAAeA,IAAf","sourcesContent":["import { useState } from \"react\";\nimport EditForm from \"./EditForm\";\nimport { Button } from \"react-bootstrap\";\n\nconst Task = (props) => {\n  const [isInEditMode, setIsInEditMode] = useState(false);\n\n  const handledeleteTask = (id) => {\n    fetch(props.baseUrl + \"/tasks/\" + id, {\n      method: \"DELETE\",\n    }).then((res) => {\n      const findIndex = props.allTasks.findIndex((task) => task._id === id);\n      props.deleteTask(findIndex);\n    });\n  };\n\n  const toggleEditFrom = () => {\n    setIsInEditMode(!isInEditMode);\n  };\n\n  const saveUpdateTask = (enteredTask) => {\n    props.updateTask(enteredTask);\n    setIsInEditMode(!isInEditMode);\n  };\n\n  return (\n    <tr key={props.task._id}>\n      {!isInEditMode && (\n        <>\n          <td>{props.task.name}</td>\n          <td>{props.task.dueDate}</td>\n          <td>\n            <input type=\"checkbox\" checked={props.task.isComplete} readOnly />\n          </td>\n        </>\n      )}\n      {isInEditMode && (\n        <EditForm\n          key={props.task._id}\n          task={props.task}\n          baseUrl={props.baseUrl}\n          updateTask={saveUpdateTask}\n        />\n      )}\n      <td>\n        <Button\n          variant=\"outline-light\"\n          key={props.task._id}\n          onClick={toggleEditFrom}\n        >\n          {!isInEditMode ? \"Edit\" : \"Cancel\"}\n        </Button>\n      </td>\n      <td>\n        <Button\n          variant=\"outline-light\"\n          type=\"submit\"\n          onClick={() => handledeleteTask(props.task._id)}\n        >\n          Delete\n        </Button>\n      </td>\n    </tr>\n  );\n};\n\nexport default Task;\n"]},"metadata":{},"sourceType":"module"}