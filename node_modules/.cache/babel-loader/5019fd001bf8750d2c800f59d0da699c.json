{"ast":null,"code":"var _jsxFileName = \"/Users/serenalin/sei-bromeliad/projects/daily-task-manager/daily-task-manager-front-end/taskapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Task from \"./components/Task\";\nimport NewForm from \"./components/Newform\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"; // Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst baseUrl = \"http://localhost:3003\";\n\nconst App = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n\n  const getTasks = () => {\n    fetch(baseUrl + \"/tasks\").then(res => {\n      if (res.status === 200) {\n        return res.json();\n      } else {\n        return [];\n      }\n    }).then(data => {\n      setTasks(data);\n    });\n  };\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  const handleAddTask = newTask => {\n    const copyTasks = [...tasks];\n    copyTasks.push(newTask);\n    setTasks(copyTasks);\n  };\n\n  const handleDeleteTask = index => {\n    const copyTasks = [...tasks];\n    copyTasks.splice(index, 1);\n    setTasks(copyTasks);\n  };\n\n  const handleUpdateTask = updatedTask => {\n    const copyTasks = [...tasks];\n    const findIndex = tasks.findIndex(task => task._id === updatedTask._id);\n    copyTasks[findIndex].name = updatedTask.name;\n    copyTasks[findIndex].dueDate = updatedTask.dueDate;\n    copyTasks[findIndex].isComplete = updatedTask.isComplete;\n    setTasks(copyTasks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Daily Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a new task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewForm, {\n      baseUrl: baseUrl,\n      addTask: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"All Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map(task => {\n          return /*#__PURE__*/_jsxDEV(Task, {\n            task: task,\n            allTasks: tasks,\n            baseUrl: baseUrl,\n            deleteTask: handleDeleteTask,\n            updateTask: handleUpdateTask\n          }, task._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Calendar, {\n        localizer: localizer,\n        defaultDate: new Date(),\n        defaultView: \"month\",\n        style: {\n          height: \"100vh\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/serenalin/sei-bromeliad/projects/daily-task-manager/daily-task-manager-front-end/taskapp/src/App.js"],"names":["React","useState","useEffect","Task","NewForm","Calendar","momentLocalizer","moment","localizer","baseUrl","App","tasks","setTasks","getTasks","fetch","then","res","status","json","data","handleAddTask","newTask","copyTasks","push","handleDeleteTask","index","splice","handleUpdateTask","updatedTask","findIndex","task","_id","name","dueDate","isComplete","map","Date","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Task from \"./components/Task\";\nimport NewForm from \"./components/Newform\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\n\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n// Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\nconst localizer = momentLocalizer(moment);\n\nconst baseUrl = \"http://localhost:3003\";\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n\n  const getTasks = () => {\n    fetch(baseUrl + \"/tasks\")\n      .then((res) => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          return [];\n        }\n      })\n      .then((data) => {\n        setTasks(data);\n      });\n  };\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  const handleAddTask = (newTask) => {\n    const copyTasks = [...tasks];\n    copyTasks.push(newTask);\n    setTasks(copyTasks);\n  };\n\n  const handleDeleteTask = (index) => {\n    const copyTasks = [...tasks];\n    copyTasks.splice(index, 1);\n    setTasks(copyTasks);\n  };\n\n  const handleUpdateTask = (updatedTask) => {\n    const copyTasks = [...tasks];\n    const findIndex = tasks.findIndex((task) => task._id === updatedTask._id);\n    copyTasks[findIndex].name = updatedTask.name;\n    copyTasks[findIndex].dueDate = updatedTask.dueDate;\n    copyTasks[findIndex].isComplete = updatedTask.isComplete;\n    setTasks(copyTasks);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Daily Task Manager</h1>\n      <h2>Add a new task</h2>\n      <NewForm baseUrl={baseUrl} addTask={handleAddTask} />\n      <h3>All Tasks</h3>\n      <table>\n        <tbody>\n          {tasks.map((task) => {\n            return (\n              <Task\n                key={task._id}\n                task={task}\n                allTasks={tasks}\n                baseUrl={baseUrl}\n                deleteTask={handleDeleteTask}\n                updateTask={handleUpdateTask}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n      <div>\n        <Calendar\n          localizer={localizer}\n          defaultDate={new Date()}\n          defaultView=\"month\"\n          style={{ height: \"100vh\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}