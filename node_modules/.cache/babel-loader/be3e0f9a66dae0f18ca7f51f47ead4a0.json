{"ast":null,"code":"var _jsxFileName = \"/Users/serenalin/sei-bromeliad/projects/daily-task-manager/daily-task-manager-front-end/taskapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Task from \"./components/Task\";\nimport NewForm from \"./components/Newform\";\nimport SignUp from \"./components/SignUp\";\nimport SignIn from \"./components/SignIn\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"; // Setup the localizer by providing the moment Object to the correct localizer.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst baseUrl = \"http://localhost:3003\";\n\nconst App = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const events = tasks.map(task => ({\n    start: moment(task.dueDate).toDate(),\n    end: moment(task.dueDate).add(1, \"days\").toDate(),\n    title: task.name\n  }));\n\n  const getTasks = () => {\n    fetch(baseUrl + \"/tasks\", {\n      credentials: \"include\"\n    }).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      } else {\n        return [];\n      }\n    }).then(data => {\n      setTasks(data);\n    });\n  };\n\n  const signOut = () => {\n    fetch(baseUrl + \"/signout\", {\n      credentials: \"include\",\n      method: \"POST\"\n    });\n  };\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  const handleAddTask = newTask => {\n    const copyTasks = [...tasks];\n    copyTasks.push(newTask);\n    setTasks(copyTasks);\n  };\n\n  const handleDeleteTask = index => {\n    const copyTasks = [...tasks];\n    copyTasks.splice(index, 1);\n    setTasks(copyTasks);\n  };\n\n  const handleUpdateTask = updatedTask => {\n    const copyTasks = [...tasks];\n    const findIndex = tasks.findIndex(task => task._id === updatedTask._id);\n    copyTasks[findIndex].name = updatedTask.name;\n    copyTasks[findIndex].dueDate = updatedTask.dueDate;\n    copyTasks[findIndex].isComplete = updatedTask.isComplete;\n    setTasks(copyTasks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Daily Task Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SignUp, {\n        baseUrl: baseUrl,\n        getTasks: getTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SignIn, {\n        baseUrl: baseUrl,\n        getTasks: getTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Sign out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add a new task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewForm, {\n        baseUrl: baseUrl,\n        addTask: handleAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"task-calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"All Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          variant: \"dark\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Task Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Due Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), tasks.map(task => {\n              return /*#__PURE__*/_jsxDEV(Task, {\n                task: task,\n                allTasks: tasks,\n                baseUrl: baseUrl,\n                deleteTask: handleDeleteTask,\n                updateTask: handleUpdateTask\n              }, task._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Calendar, {\n          views: [\"month\", \"week\"],\n          localizer: localizer,\n          defaultDate: new Date(),\n          defaultView: \"month\",\n          events: events,\n          style: {\n            height: \"50vh\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/serenalin/sei-bromeliad/projects/daily-task-manager/daily-task-manager-front-end/taskapp/src/App.js"],"names":["React","useState","useEffect","Task","NewForm","SignUp","SignIn","Calendar","momentLocalizer","moment","Container","Row","Col","Table","localizer","baseUrl","App","tasks","setTasks","events","map","task","start","dueDate","toDate","end","add","title","name","getTasks","fetch","credentials","then","res","status","json","data","signOut","method","handleAddTask","newTask","copyTasks","push","handleDeleteTask","index","splice","handleUpdateTask","updatedTask","findIndex","_id","isComplete","Date","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Task from \"./components/Task\";\nimport NewForm from \"./components/Newform\";\nimport SignUp from \"./components/SignUp\";\nimport SignIn from \"./components/SignIn\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\n\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\n// Setup the localizer by providing the moment Object to the correct localizer.\nconst localizer = momentLocalizer(moment);\n\nconst baseUrl = \"http://localhost:3003\";\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n\n  const events = tasks.map((task) => ({\n    start: moment(task.dueDate).toDate(),\n    end: moment(task.dueDate).add(1, \"days\").toDate(),\n    title: task.name,\n  }));\n\n  const getTasks = () => {\n    fetch(baseUrl + \"/tasks\", {\n      credentials: \"include\",\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          return [];\n        }\n      })\n      .then((data) => {\n        setTasks(data);\n      });\n  };\n\n  const signOut = () => {\n    fetch(baseUrl + \"/signout\", {\n      credentials: \"include\",\n      method: \"POST\",\n    });\n  };\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  const handleAddTask = (newTask) => {\n    const copyTasks = [...tasks];\n    copyTasks.push(newTask);\n    setTasks(copyTasks);\n  };\n\n  const handleDeleteTask = (index) => {\n    const copyTasks = [...tasks];\n    copyTasks.splice(index, 1);\n    setTasks(copyTasks);\n  };\n\n  const handleUpdateTask = (updatedTask) => {\n    const copyTasks = [...tasks];\n    const findIndex = tasks.findIndex((task) => task._id === updatedTask._id);\n    copyTasks[findIndex].name = updatedTask.name;\n    copyTasks[findIndex].dueDate = updatedTask.dueDate;\n    copyTasks[findIndex].isComplete = updatedTask.isComplete;\n    setTasks(copyTasks);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1>Daily Task Manager</h1>\n        <SignUp baseUrl={baseUrl} getTasks={getTasks} />\n        <SignIn baseUrl={baseUrl} getTasks={getTasks} />\n        <button>Sign out</button>\n        <h2>Add a new task</h2>\n        <NewForm baseUrl={baseUrl} addTask={handleAddTask} />\n      </Container>\n\n      <Row className=\"task-calendar-container\">\n        <Col xs={12} md={6}>\n          <h3>All Tasks</h3>\n          <Table striped bordered hover variant=\"dark\">\n            <tbody>\n              <tr>\n                <td>Task Name</td>\n                <td>Due Date</td>\n                <td>Completed</td>\n                <td></td>\n                <td></td>\n              </tr>\n              {tasks.map((task) => {\n                return (\n                  <Task\n                    key={task._id}\n                    task={task}\n                    allTasks={tasks}\n                    baseUrl={baseUrl}\n                    deleteTask={handleDeleteTask}\n                    updateTask={handleUpdateTask}\n                  />\n                );\n              })}\n            </tbody>\n          </Table>\n        </Col>\n        <Col xs={12} md={6}>\n          <Calendar\n            views={[\"month\", \"week\"]}\n            localizer={localizer}\n            defaultDate={new Date()}\n            defaultView=\"month\"\n            events={events}\n            style={{ height: \"50vh\" }}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}